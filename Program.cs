namespace GenResourceStringMap
{
    using System;
    using System.Collections.Generic;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Runtime.InteropServices;
    using System.Text;
    using System.Xml.Linq;

    public static class GenResourceStringMap
    {
        public static void Main(string[] args)
        {
            if (args.Length != 4)
            {
                Console.WriteLine("Usage: GenResourceStringMap resourceFile outputPath namespace className");
                return;
            }

            MainInner(args[0], args[1], args[2], args[3]);
        }

        internal static void MainInner(string resourceFile, string outputPath, string @namespace, string className)
        {
            var sb = new StringBuilder();

            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("//   GenStringMap 1.0");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine();
            sb.AppendLine($"namespace {@namespace}");
            sb.AppendLine("{");
            sb.AppendLine("    using System;");
            sb.AppendLine("    using System.Runtime.CompilerServices;");
            sb.AppendLine();
            sb.AppendLine($"    public static class {className}");
            sb.AppendLine("    {");
            sb.AppendLine("        public enum Key : long");
            sb.AppendLine("        {");

            var asciiList = new List<byte>();
            var list = new List<string>();
            var offset = 0;
            foreach (XElement node in XDocument.Load(resourceFile).Descendants("data"))
            {
                var name = node.Attribute("name")?.Value;
                if (name == null)
                {
                    return;
                }

                var tvalue = node.Elements("value").FirstOrDefault()?.Value;

                if (tvalue == null)
                {
                    return;
                }

                var value = tvalue == "\n" || tvalue == "\r\n" ? tvalue : tvalue.Trim();

                if (string.IsNullOrEmpty(name))
                {
                    return;
                }

                var identifier = GetIdentifierFromResourceName(name);

                var t = new TwoIntegers(offset, value.Length);

                sb.AppendLine($"            {identifier} = {t.Value},");

                byte[] bytes = Encoding.ASCII.GetBytes(value);

                asciiList.AddRange(bytes);
                asciiList.Add((byte)'\0');

                list.Add(identifier);

                offset += bytes.Length + 1;
            }

            sb.AppendLine("        }");
            sb.AppendLine();

            for (var i = 0; i < list.Count; ++i)
            {
                sb.AppendLine($"        public static ref readonly byte {list[i]} => ref GetCString(Key.{list[i]});");
                sb.AppendLine();
            }

            sb.AppendLine("        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
            sb.AppendLine("        public static ref readonly byte GetCString(Key arg)");
            sb.AppendLine("        {");
            sb.AppendLine("            long value = (long)arg;");
            sb.AppendLine("            return ref GetStringMap((int)(value & uint.MaxValue));");
            sb.AppendLine("        }");
            sb.AppendLine();
            sb.AppendLine("        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
            sb.AppendLine("        public static ref readonly byte GetCStringWithLength(Key arg, out int length)");
            sb.AppendLine("        {");
            sb.AppendLine("            long value = (long)arg;");
            sb.AppendLine("            length = (int)(value >> 32);");
            sb.AppendLine("            return ref GetStringMap((int)(value & uint.MaxValue));");
            sb.AppendLine("        }");
            sb.AppendLine();
            sb.AppendLine("        [MethodImpl(MethodImplOptions.AggressiveInlining | MethodImplOptions.AggressiveOptimization)]");
            sb.AppendLine("        private static ref readonly byte GetStringMap(int offset)");
            sb.AppendLine("        {");
            sb.AppendLine("            var data = new ReadOnlySpan<byte>(new byte[] { ");
            sb.Append("                ");

            for (var i = 0; i < asciiList.Count; ++i)
            {
                if (i % 40 == 0)
                {
                    sb.AppendLine();
                    sb.Append("                ");
                }

                sb.Append($"0x{asciiList[i]:x2},");
            }

            sb.AppendLine();
            sb.AppendLine("            });");
            sb.AppendLine();
            sb.AppendLine("            return ref Unsafe.AsRef<byte>(data[offset]);");
            sb.AppendLine("        }");
            sb.AppendLine("    }");

            sb.AppendLine("}");

            File.WriteAllText(outputPath, sb.ToString());
        }

        private static string GetIdentifierFromResourceName(string name)
        {
            if (name.All(IsIdentifierPartCharacter))
            {
                return IsIdentifierStartCharacter(name[0]) ? name : "_" + name;
            }

            var builder = new StringBuilder(name.Length);

            var f = name[0];
            if (IsIdentifierPartCharacter(f) && !IsIdentifierStartCharacter(f))
            {
                builder.Append('_');
            }

            foreach (var c in name)
            {
                builder.Append(IsIdentifierPartCharacter(c) ? c : '_');
            }

            return builder.ToString();

            static bool IsIdentifierStartCharacter(char ch) => ch == '_' || IsLetterChar(CharUnicodeInfo.GetUnicodeCategory(ch));

            static bool IsIdentifierPartCharacter(char ch)
            {
                UnicodeCategory cat = CharUnicodeInfo.GetUnicodeCategory(ch);
                return IsLetterChar(cat)
                       || cat == UnicodeCategory.DecimalDigitNumber
                       || cat == UnicodeCategory.ConnectorPunctuation
                       || cat == UnicodeCategory.Format
                       || cat == UnicodeCategory.NonSpacingMark
                       || cat == UnicodeCategory.SpacingCombiningMark;
            }

            static bool IsLetterChar(UnicodeCategory cat)
            {
                switch (cat)
                {
                    case UnicodeCategory.UppercaseLetter:
                    case UnicodeCategory.LowercaseLetter:
                    case UnicodeCategory.TitlecaseLetter:
                    case UnicodeCategory.ModifierLetter:
                    case UnicodeCategory.OtherLetter:
                    case UnicodeCategory.LetterNumber:
                        return true;
                }

                return false;
            }
        }

        [StructLayout(LayoutKind.Explicit)]
        internal struct TwoIntegers
        {
            [FieldOffset(0)]
            public int RowIndex;

            [FieldOffset(4)]
            public int Length;

            [FieldOffset(0)]
            public long Value;

            public TwoIntegers(int a, int b)
            {
                this.Value = 0;
                this.RowIndex = a;
                this.Length = b;
            }
        }
    }
}